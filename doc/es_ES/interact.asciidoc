:Autor:    Skyline-ch
:Email:     <skyline-ch@play-4-fun.net>
:Date:      12.12.2015
:Revisión: 2.0.0

= Interacciones - principio

La interacción en el sistema de Jeedom permite llevar a cabo acciones de comando de texto o voz.

Tipo de comandos:

* acción: ejecutar un comando ejemplos: activar o desactivar una lámpara, alarma, calefacción, etc....
* Info: consulta a Jeedom con un comando para saber por ejemplo, la temperatura de la habitación, el estado de un dispositivo.

Estos comandos pueden obtenerse por:

* SMS: enviar un SMS para ejecutar comandos (acción) o una pregunta (info).
* Vocal: dictar una sentencia con Siri, Google Now, SARAH, etc.... Para ejecutar comandos (acción) o una pregunta (info).
* HTTP: lanzar una dirección URL HTTP que contiene el texto (por ejemplo, Tasker, Slack) para ejecutar comandos (acción) o una pregunta (info).

La importancia de las interacciones se encuentran en la integración simplificada en otro sistema como smartphones, tabletas, otro sistema domótico, ect...

Con un único mecanismo en otro sistema, por tanto, puede controlar cualquier Jeedom, lo que permite una gran flexibilidad y evita errores al cambiar las configuraciones de sus dispositivos como sería el caso con acceso directo a través de la url de cada comando.

== Primer paso

=== Página inicial de interacciones

Para acceder a la página interacción vaya a Herramientas -> interacciones: 

image::../images/interact001.png[]

Lista de interacciones y acciones de carácter general:

image::../images/interact002.png[]

[TIP]
Al igual que en muchos lugares en Jeedom, situar el ratón en la zona la izquierda mostrará un menú de acceso rápido (se puede mostrar como "siempre visible" desde la configuración de su perfil).

* En el la parte superior de la página, hay 3 botones:
** 1 * el botón "Añadir" que permite crear una nueva interacción.
** 2 * el botón "Actualizar" que recreará todas las interacciones (puede llevar mucho tiempo > 5 min).
** 3 * el botón "Probar" que abre un cuadro de diálogo para escribir una frase y hacer un test.

[TIP]
Si tienes una interacción que genera una sentencia para las luces por ejemplo, que agregue un nuevo módulo de control de luz, necesitas regenerar todas las interacciones en la interacción en cuestión y salvarla para crear la frase de este nuevo módulo.


=== Crear-editar una interacción

El principio de creación es bastante sencillo, definiremos una oración modelo con el generador, que permitirá a Jeedom crear uno o varios cientos de frases ,que son combinaciones del modelo.

definir la misma forma de las respuestas con un modelo (permite a Jeedom tener respuestas múltiples a una sola pregunta).

También se define un comando a ejecutar si por ejemplo la interacción no está relacionada con una acción, si no con información o si desea realizar una acción particular después (también es posible ejecutar un escenario, revisar varias órdenes...).

=== Interfaz de configuración

Desde esta página se puede configurar todas las interacciones orales (a través del módulo de SARAH, o tasker (+ autovoice), véase https://jeedom.fr/doc/documentation/howto/fr_FR/doc-howto-android.autovoice.html [aquí]) o por escrito (por sms o el plugin de Slack por ejemplo...) se puede encontrar en el market de Jeedom.

Una vez creada la interacción, haga clic en una interacción existente para modificarla, se abrirá la página de configuración de la interacción:

image::../images/interact003.png[]

Aquí puedes encontrar 2 zonas con varios elementos entre ellos: 

* *General*
** *Nombre* : nombre de la interacción (puede estar vacía, el nombre reemplaza el texto de la aplicación en la lista de interacciones).
** *Grupo* : grupo de interacción, esto permite organizarlos (puede estar vacio, por lo que pertenecerán al grupo "ninguno").
** Aplicación *: la frase modelo generada (obligatorio).
** *Sinónimos* : permite definir sinónimos de los nombres de los comandos.
** *Respuesta* : la respuesta a dar.
** Conversión Binaria* : permite convertir los valores binarios en abierto/cerrado por ejemplo (sólo para comandos de tipo información binaria).
** *Usuarios autorizados* : limita la interacción a ciertos usuarios (separados por un |).
* *Filtros (limitar el alcance de la plantilla a los elementos seleccionados)*
** *Limitar a órdenes de tipo* : permite utilizar sólo los tipos acciones, información o los 2 tipos.
** * Límita permanente el subtipo *: permite limitar la generación de uno o más subtipos.
** Límitar los comandos por unidad *: restringe la generación en una más unidades (Jeedom crea la lista automáticamente de las unidades definidas en sus comandos).
** *Limitar los comandos pertenecientes al objeto* : permite limitar la generación en uno o más objetos (Jeedom crea la lista automáticamente de los objetos que ha creado).
** Limitar el plugin *: permite limitar la generación en uno o más plugins (Jeedom crea la lista automáticamente de los plugins instalados).
** *Limitar categoría* : permite limitar la generación en una o más categorías.
** *Límitar dispositivo* : permite limitar la generación a un solo equipo/módulo (Jeedom crea la lista automáticamente de componentes y módulos que tiene).
* *Acción* : utilizar si quieres uno o más comandos específicos de destino o pasar parámetros específicos.
* *Frases generadas*
** Frases generadas* : botón que permite ver las frases generadas por frase modelo (debes guardar la interacción para construir o reconstruir las frases).
* *Número de frases generadas* : número de frases generadas.

=== Interacción simple

La forma más sencilla de configurar una interacción es darle un modelo de generador rígido sin variación posible, este método enfocara específicamente con un comando o un script.

En el ejemplo que sigue, puede verse en el campo 'Demande' la frase exacta para activar la interacción, para encender la luz del techo del salón.

image::../images/interact004.png[]

Podemos ver esta captura la configuración para tener una interacción ligada a una acción específica, esta acción se define en el apartado Acción' de la página.

Puedes imaginar en hacer lo mismo con varias acciones, para encender varias luces en el salón como en el ejemplo que sigue:

image::../images/interact005.png[]

En los 2 ejemplos anteriores, la frase modelo, es idéntica, pero las acciones resultantes varían dependiendo de lo que se configure en la parte "Acción", así que puedes con una simple frase de  interacción única imaginar acciones combinadas entre varios comandos y varios escenarios (también puede desencadenar escenarios de acción por parte de las interacciones).

[TIP]
Para agregar un escenario, crear una nueva acción, escribir "scenario" sin acento, presiona tab en el teclado para que aparezca el selector de escenario.


=== Interacción múltiples de comandos

Aquí vemos la importancia y el poder de las interacciones, con una frase modelo, podremos generar frases para un grupo de comandos.

para mejorar lo que ha hecho anteriormente, eliminar las acciones que hayas agregado y en su lugar en "Aplicación", usaremos las etiquetas * \#commande#* y * \#equipement#*, Jeedom reemplazará estas etiquetas por el nombre de órden y el nombre del dispositivo (se puede ver la importancia de tener nombres de comandos/dispositivos coherentes).

image::../images/interact006.png[]

Aquí puedes ver que jeedom ha generado 152 frases de nuestra frase, sin embargo no están muy bien construidas y tienen un poco de todo.

Para hacer la orden para todo, vamos a utilizar filtros (parte derecha de nuestra página de configuración).
En este ejemplo queremos generar frases para encender las luces, así que puede desactivar el comando de tipo información (al guardar sólo quedam 95 frases generadas), luego en los subtipos puede mantener marcado por defecto la corresponde tecla de acción (por lo tanto quedan 16 frases).

image::../images/interact007.png[]

Es mejor y más natural si tomamos como ejemplo "en la entrada", sería bueno poder transformar esta frase en "ilumina la entrada" o "iluminar la entrada".
Para ello Jeedom en el campo de aplicación, podemos generar un campo de sinónimos que nos permitirá nombrar diferentemente el nombre de órdenes en nuestras frases, aquí, tengo incluso "on2" en módulos que pueden controlar 2 salidas.

En los sinónimos es donde vas a indicar el nombre del comando y el sinónimo(s) a utilizar : 

image::../images/interact008.png[]

Aquí puedes ver una pequeña sintaxis para sinónimos, un nombre de comando, puede tener varios sinónimos, aquí "en" como un sinónimo de "luz" y "luces", por lo que la sintaxis sería "#nom del comando #" * #= #* "#synonyme # 1" * #, #* "#synonyme # 2" (puedes poner tantos sinónimos que desees), luego añadir sinónimos para otro nombre de comando, agregar una barra vertical después del último sinónimo "#| #" suite que puede dar otra vez el nombre del comando quién tendrá sinónimos como en la la primera parte.

Bueno, esto esta mejor pero todavía faltan para el comando "en" "entrar" en el "el" y otro "la" o "el" o "una" ect...
Podría cambiar el nombre del dispositivo a agregar, sería una solución, de lo contrario puede utilizar cambios en la aplicación, se trata de una serie de posibles palabras a una ubicación en la frase de la lista, Jeedom por lo tanto generará frases con sus variaciones.

image::../images/interact009.png[]

Como se puede ver en la lista de la izquierda, ahora hay unas frases un poco más correctas, para nuestro ejemplo "en" la 'entrada', por lo tanto es "iluminar" introducción, "Ilumina una entrada", "Activar una entrada", "Iluminar la entrada" ect... están valoradas todas las variantes posibles con lo que se añadió entre '[]' para cada sinónimo, que rápidamente genera un montón de frases (168 aquí).

Para ajustar incluso un poco más  y no hacer cosas improbables tales como "encender el televisor," puede permitir a Jeedom eliminar las solicitudes sintácticamente incorrectas, por lo tanto eliminará lo que está demasiado alejado de la actual sintaxis de una frase.
En nuestro caso pasamos de 168 oraciones a 130 oraciones.

image::../images/interact010.png[]


Por lo tanto es importante construir bien sus frases modelos y sinónimos, así como seleccionar buenos filtros para no generar demasiadas frases innecesarias.
Personalmente me parece interesante tener algunas incoherencias en el estilo 'una entrada' porque si, si eres una persona extranjera que no habla correctamente el francés, las interacciones trabajarán de la misma forma.

==== Función interacción avanzada

==== Personalizar respuestas

Hasta ahora como respuesta a una interacción, tuvimos una simple frase que no indica mucho, excepto que algo ha sucedido.
La idea es que Jeedom nos diga lo que ha hecho con más precisión.
Aquí interve el campo de la respuesta en la que podremos personalizar la respuesta según el comando ejecutado.

Para ello utilizamos otra vez las etiqueta deJeedom
Nuestras luces pueden utilizar una frase del estilo: iluminar \#equipement# (ver captura a continuación).

image::../images/interact011.png[]

También puede Agregar un valor a otro comando como una temperatura, un número de personas etc....

image::../images/interact012.png[]

===== Conversión binaria
Las conversiones a binario se aplican a los comandos de tipo información, cuyo subtipo es binario (devuelve 0 o 1) por lo tanto debería activar buenos filtros, como se ve en la captura inferior (para categorías todos podemos comprobar, por ejemplo he guardado esa luz).

image::../images/interact013.png[]

Como se ve aquí, mantuve casi la misma estructura de la aplicación (es voluntario para centrarse en los detalles), adapté los sinónimos para ser más coherentes, sin embargo, la respuesta es #impératif # poner solamente \#valeur# que representa el 0 o 1, Jeedom reemplazará por la conversión binario que sigue.

El campo de conversión binaria debe contener 2 respuestas, primero la respuesta si el valor de la orden es 0, entonces para el comando de respuesta si, separar 1 con una barra vertical
Aquí las respuestas son simplemente no y sí, pero podría poner una frase un poco más larga.

[ADVERTENCIA]
Las etiquetas no funcionan en las conversiones a binario.

====== Usuarios autorizados

El campo "usuarios autorizados" permite que sólo determinadas personas puedan ejecutar el comando, puedes poner varios usuarios separados por un "|".

Ejemplo: usuario1|usuario2

Uno puede imaginar que una alarma puede habilitarse o deshabilitarse por un niño o a un vecino que riegue las plantas en tu ausencia...

====== Exclusión Regexp 
[IMPORTANTE]
Función reservada a conocedores del tema que sepan usar Google.

Puesto que Jeedom V2.00 tiene la capacidad de crear exclusiones tipo [Regexp] https://fr.wikipedia.org/wiki/Expression_rationnelle , si una frase generada coincide con este Regexp se eliminarán.
La intención es eliminar los falsos positivos, es decir una frase de Jeedom que permite algo que no coincide con lo que queremos o que puedan interferir con la interacción de otro que tenga una frase similar.

Hay 2 lugares para aplicar una Regexp:

* en la misma interacción en el campo "Exclusión Regexp".

* En el menú "configuración"->"configuración de las interacciones"-> campo general de exclusión "Regexp" para las interacciones.

El campo genera de exclusión "Regex" para las interacciones, esta regla se aplicará a todas las interacciones que se creen o sean actualizadas más tarde, si deseas aplicar a todas las interacciones existentes debes regenerar las interacciones.
Generalmente se utiliza para eliminar frases mal formadas en interacciones más generadas.

En el campo de la exclusión "Regexp" en cada página de configuración de la interacción, puedes añadirr una Regexp específica que actuará únicamente en la supuesta interacción, borrará específicamente para dicha interacción, esto también puede eliminar una interacción para un comando específico, para los que no queremos ofrecer esta posibilidad en el contexto de un comando de generación múltiple.

La siguiente captura de pantalla, muestra la interacción sin la expresión Regexp, en la lista de la izquierda, filtré frases para demostrarle las frases que se eliminarán, en realidad hay 76 sentencias generadas con la configuración de la interacción.

image::../images/interact014.png[]


Como puedes ver en la siguiente imagen, he añadido una simple regexp que buscará la palabra "Julie" en las frases generadas y eliminarlas, sin embargo, se puede ver en la lista de la izquierda que aun hay frases con la palabra "julie", en expresiones regulares, Julie no es igual a julie, ésto se llama sensibilidad entre mayúsculas y minúsculas , en francés una letra mayúscula es diferente de una letra minúscula.
Como se muestra en la siguiente pantalla, hay 71 frases, 5 con "Julie" se han eliminado.

Una expresión regular se compone como sigue:

* Primero un delimitador, aquí es una barra "/" al principio y al final de la frase.

* lo que sigue la barra representa cualquier carácter, espacio o numero.

* El "*" mientras tanto, indica que puede ser 0 o varias veces el carácter anterior que le precede, aquí un punto, así que en buen francés cualquier elemento.

* Julie, que es la palabra de búsqueda (palabra u otro patrón de expresión), otra vez una barra de punto seguido.

Si traducimos esta expresión en una frase, sería "busca la palabra Julie que sea precedida por  nada y seguida por nada".

Es una versión muy simple de las expresiones regulares, pero es muy complicado de entender, me tomó un momento para explicar el funcionamiento, por ejemplo, un poco más complejo, un regexp para comprobar una URL: 

/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]\*)*\/?$/ 

Una vez que las escribas, usted entenderálas expresiones regulares.

image::../images/interact015.png[]

Para resolver el problema de mayúsculas y minúsculas, puedes agregar a nuestra expresión una opción que hará insensible, o en otras palabras, que considere una letra minúscula igual a una letra mayúscula, para esto simplemente agregar una "i" al final de nuestra expresión.

image::../images/interact016.png[]

Añadiendo la opción "i" hay más que 55 frases generadas, en la lista de la izquierda con el filtro de julie para buscar las frases  que contienen esta palabra, y hay más.

Como este es un tema muy complejo no entraré en más en detalles, hay suficiente información en la red, y no te olvides de que Google es también tu amigo, este amigo, fue él quien me enseñó a entender las Regexp y su código, por lo tanto si me ayudó a mí, también podrá ayudarte poniendo un poquito de empeño.

Enlace útil : 

* http://google.fr

* http://www.commentcamarche.net/contents/585-javascript-l-objet-regexp

* https://www.lucaswillems.com/fr/articles/25/tutoriel-pour-maitriser-les-expressions-regulieres

* https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/les-expressions-regulieres-partie-1-2


== Ejemplos

=== Réponse compuesta con más informacion

También es posible poner multiples comandos info una respuesta, por ejemplo obtener un resumen de la situación.

image::../images/interact021.png[]

En este ejemplo vemos una frase simple que devolverá una respuesta con 3 temperaturas diferentes, por lo que podemos obtener aquí una sistema de información de una sola vez.


=== ¿Hay alguien en la sala?

==== Versión básica

* La pregunta entonces es  "'y' hay alguien en la habitación "
* La respuesta será "no hay nadie allí en la sala" o "Si hay alguien en la habitación"
* El comando a responder es "julie \#[Chambre] [FGMS-001-2] [presencia] #"

image::../images/interact017.png[]

En este ejemplo precisamente el objetivo es que un equipo específico permita tener una respuesta personalizada, por lo que podríamos imaginar cambiar la respuesta del ejemplo de "allí no hay nadie en la casa de #julie # |oui hay alguien en la casa de #julie #"

==== Evolución 

* La pregunta entonces es "\#commande# [dans la |dans le] \#objet#"
* La respuesta será "no hay nadie allí en la sala" o "Si hay alguien en la habitación"
* No hay ningún comando que responda en la parte de acción, ya que es una interacción de comando múltiple
* Añadir una expresión regular que podremos limpiar los comandos que desea que no contengan las frases acerca de los comandos 'Presencia'.

image::../images/interact018.png[]

Sin la expresión aquí se obtiene 11 sentencias, sin embargo mi interacción está diseñada para generar frases sólo para preguntar si hay alguien en una habitación, por lo que no tengo necesidad de saber el estado de la  lámpara ni de enchufes, que pueden ser solucionadas con el filtrado de regexp.
Para hacerlo más flexible puedes agregar sinónimos, pero en este caso no te olvides de cambiar la expresión.


=== Conocer la humedad/temperatura/luminosidad

==== Versión básica
Podría escribir la frase pura como por ejemplo "Cuál es la temperatura de la habitación", pero debe haber una para cada sensor de temperatura, luz y humedad, con el sistema de generación de sentencias de Jeedom,  con una sola interacción poder generar las frases para estos 3 tipos de sensores de medición.

Aquí un ejemplo genérico que se utiliza para obtener la temperatura, humedad, luminosidad de las diferentes partes (objeto en el aspecto de Jeedom).

image::../images/interact019.png[]

* Puede hacer que una simple frase genérica tipo "Cuál es la temperatura de la habitación" o "Cual es el la luminosidad de la habitación" se puede convertir en: "quelle est [la |l\']\#commande# [du |de la |de l'| sur le |dans le | dans la ]#objet#" (el uso de [palabra1 | palabra2] permite esta posibilidad o esta otra para generar todas las variantes posibles de la frase palabra1 o palabra2). " Con la generación de Jeedom generará todas las posibles combinaciones de frases con todos los comandos existentes (dependiendo del filtro) sustituyendo \#commande# por el nombre del comando y \#objet# por el nombre del objeto.
* La respuesta será del tipo "21 ° C" o "200 lux" en pocas palabras: \#valeur# \#unite# (la unidad es configurable en la configuración de cada comando independientemente)
* Este ejemplo por lo tanto genera una frase para todos los comandos de tipo información numérica que tiene una unidad, por lo tanto podemos desactivar las unidades en el filtro correspondiente para limitar al tipo que nos interesa.


==== Evolución 
Por lo tanto puedes agregar sinónimos en nombre de comando para obtener algo más natural, añadir una regexp para filtrar comandos que no  tenga nada que ver con nuestra interacción.

Acerca del Sinónimo, digamos que  permite a Jeedom que un comando llamado "X" puede también ser llamado "Y" y en nuestra frase si hay "encendido y", Jeedom sabe que esto es enceder x, este método es muy conveniente cambiar el nombre de comandos de control cuando se muestran en la pantalla escritos en una forma vocal no natural  o en una frase escrita como "ON" un botón escrito con esto es totalmente lógico, pero no en el contexto de una frase.

También puede Agregar un filtro de Regexp para quitar unos cuantos comandos. Usando el simple ejemplo que vemos "batería" o "latencia", frases que no tienen nada que ver con la interacción de la temperatura, humedad y luminosidad.

image::../images/interact020.png[]

Por lo tanto, podemos ver una regexp: 

*(batería|latencia|presión|velocidad|consumo)*

Esto permite eliminar todos los comandos que tengan una de estas palabras en su frase

[NOTA]
La expresión aquí es una versión simplificada para un uso sencillo, por lo tanto ya sea para usar las expresiones tradicionales, utilice la expresión simplificada como en este ejemplo.


=== Control de un regulador o termostato (regulador)

==== Versión básica

Es posible controlar una lámpara en porcentaje (dimmer) o un termostato con interacciones. Este es un ejemplo para impulsar su atenuador en una lámpara con interacciones: 

image::../images/interact022.png[]

Como se ve, aquí en la solicitud de etiquetado * \#consigna#* (puedes poner lo que quieras) que esté incluido en el control de la unidad para aplicar el valor deseado.
Para hacer esto tienes 3 partes:
* Uso: en la cual creamos una etiqueta que representa el valor que se enviará a la interacción.
* Respuesta: reutiliza la etiqueta para la respuesta para estar seguro de lo que ha comprendido Jeedom.
* Acción: ponemos una acción sobre la lampara que queremos pilotar y en la etiqueta #consigna# el valor que pasamos.

[NOTA]
Puedes utilizar cualquier etiqueta ,excepto aquellas ya utilizados por Jeedom, puedes accionar varios  comandos por ejemplo. Tenga en cuenta también que todas las etiquetas se pasan a los escenarios que inicia la interacción (sin embargo, debe ser el escenario en "Ejecución plan de avance").

==== Evolución 
Puedes manejar todos los comandos tipo cursor con una interacción única, con el siguiente ejemplo, por lo tanto podremos controlar varios receptores con una sola interacción y por lo tanto generar un conjunto de sentencias para el controlador.

image::../images/interact033.png[]

En esta interacción, no hay ningún comando en la parte de acción, Jeedom generará a partir de las etiquetas de la lista de frases, puedes ver las etiquetas * \#slider#*, es imperativo utilizar esta etiqueta para instrucciones en una orden de interacción múltiple, puede que no sea la última palabra en la frase.
También podemos ver en el ejemplo que se puede utilizar en la respuesta de una etiqueta que no parte de la orden, la mayoría de las etiquetas disponibles en los escenarios están disponibles también en las interacciones y por lo tanto pueden ser utilizadas en una respuesta.

El resultado de la interacción : 

image::../images/interact034.png[]

Se puede observar que la etiqueta * \#equipement#* que no se utiliza en la orden, se completa correctamente en la respuesta.


=== Controlar el color de una tira LED

Es posible controlar el color por comando desde las interacciones ,por ejemplo pidiendo a Jeedom encender la tira led en azul. 
Aquí la interacción: 

image::../images/interact023.png[]

Así que no es nada complicado, sin embargo debes configurar los colores en Jeedom para que funcione, vaya al menú -> Configuración (arriba a la derecha) y luego en al apartado "Configuración de las interacciones": 

image::../images/interact024.png[]

Como se ve en la captura, no hay ningún color configurado, así que agregue colores con el "+" a la derecha, el nombre del color, este es el nombre que pasará a la interacción, y luego en el lado derecho (columna "Código HTML"), haciendo clic en el color negro se puede elegir un nuevo color.

image::../images/interact025.png[]

Se pueden agregar tantos como nos parezca, es posible asignar un nombre cualquiera, por lo que podría imaginar en asignar un nombre de color para cada miembro de la familia.

Una vez configurado, dirás "Enceder el abeto verde" Jeedom búsca el color y lo aplicará al comando.


==== Utilización en un escenario

==== Versión básica
Es posible asociar una interacción a un escenario a fin de realizar acciones más complejas que ejecutar una simple acción o una solicitud de información.

image::../images/interact026.png[]

Este ejemplo permite por tanto, que el escenario que está enlazado en la parte de la acción se lance, por supuesto, podemos tener varios.


=== Programación de una acción con las interacciones

Las interacciones pueden hacer muchas cosas, en particular puedes programar dinámicamente una acción. Ejemplo: ' pon la calefacción a 22 por 14 h 50'. Esto es muy simple, sólo tiene que utilizar las etiquetas de \#time# (si definimos un tiempo especificado) o \#duration# (para X tiempo, ejemplo 1 hora): 

image::../images/interact23.JPG[]

[NOTA]
tes darás cuenta que en la respuesta de la etiqueta \#value# contiene en el caso de un tiempo de interacción programada de programación eficaz

Este es el resultado : 

image::../images/interact24.JPG[]

== Probar una Interacción 

El botón de  prueba (en la parte superior izquierda) te permite introducir una frase para probar su funcionamiento y ejecutarlo: 

image::../images/interact11.JPG[]

En respuesta, Jeedom devolverá la respuesta que corresponde a la interacción (campo respuesta): 

image::../images/interact13.JPG[]


== Configuración

A la configuración se puede acceder desde el menú de configuración (arriba a la derecha) luego en "configuración de interacciones":

image::../images/interact14.JPG[]

Aquí tienes 3 parámetros : 

** Sensibilidad *: hay 4 niveles de correspondencia 
** para una 1 palabra: el nivel de correspondencia para las interacciones en una sola palabra
** 2 palabras: el nivel de correspondencia para las interacciones en dos palabras
** 3 palabras: el nivel de correspondencia para las interacciones en tres palabras
** + 3 palabras: el nivel de correspondencia para las interacciones de más de tres palabras

La sensibilidad oscila entre 1 (correspondencia exacta) a 99 (lo que es aceptable para mi),. 

* * No contesto si no se incluye la interacción *: por defecto Jeedom respondió: "No entendí" si no se entiende la interacción, es posible deshabilitar esta función para que Jeedom no responda nada, ponga el botón en sí para desactivar la respuesta.
* *Regex de exclusión general para las interacciones *: permite definir una regexp que si corresponde a una interacción eliminará automáticamente esta frase de la generación (reservado para expertos) para más información véase las explicaciones del capítulo * "Exclusión Regexp"*

Puedes encontrar la parte de ajustes de color, que se describe en detalle en el capítulo * "Controlar el color de una tira LED"*

[IMPORTANTE]
No te olvides de guardar, en la parte inferior de la página.

[TIP]
Si habilitas los registros a nivel depuración, obtendrás un registro   interactivo con un nivel de sensibilidad mayor para la comparación de frases, esto permite afinar más fácilmente.

== Resumen

Aplicación::
Puedes utilizar "\#commande#" y "\#objet#" (los 2 deben absolutamente ser usados conjuntamente ) para generar una lista de comandos (es posible filtrar la generación para reducir la lista). También es posible utilizar "\#equipement#" (útil si varios comandos en el mismo objeto tienen el mismo nombre)
Ejemplo: Qué es el "\#commande# [de la |y |to la] \#objet#"
Durante la generación de las órdenes puedes usar el campo sinónimos (syn1 = syn2, syn3|syn4 = syn5) para reemplazar el nombre de objetos, equipos y comandos

Respuesta::
Puedes utilizar "\#valeur#" y "\#unite#" en la parte posterior (que se sustituirá por el valor y la unidad del comando). También tienes acceso a todas las etiquetas de los escenarios: 
"\#profile#" => nombre de la persona que inició la ejecución (puede no estar disponible)
Ejemplo: "\#valeur# \#unite#"
Puedes utilizar el campo de conversión binaria para convertir valores binarios (0 y 1): 
Ejemplo: no|si

Persona::
El campo persona, permitirá sólo a ciertas personas ejecutar el comando, puedes poner varios perfiles separados por |.
Ejemplo: usuario1|usuario2